package {{.SnakeName}}

import (
    "github.com/databricks/bricks/lib/ui"
	"github.com/databricks/bricks/project"
	"github.com/databricks/databricks-sdk-go/service/{{.Package.Name}}"
	"github.com/spf13/cobra"
)

{{if not .MatchesPackageName}}
	{{template "service" .}}
{{else}}
	{{skipThisFile}}
{{end}}

{{define "service"}}
var Cmd = &cobra.Command{
	Use:   "{{.KebabName}}",
    {{if .Description -}}
    Short: `{{.Summary | without "`"}}`,
	Long: `{{.Comment  "  " 80 | without "`"}}`,
    {{- end}}
}

{{- if not (eq .Name "CommandExecution") -}}
{{range .Methods}}

{{if .Request}}var {{.CamelName}}Req {{.Service.Package.Name}}.{{.Request.PascalName}}{{end}}

func init() {
    Cmd.AddCommand({{.CamelName}}Cmd)
    {{if .Request}}// TODO: short flags
    {{$method := .}}
    {{range .Request.Fields -}}
		{{if .Entity.IsObject }}// TODO: complex arg: {{.Name}}
		{{else if .Entity.IsAny }}// TODO: any: {{.Name}}
		{{else if .Entity.ArrayValue }}// TODO: array: {{.Name}}
		{{else if .Entity.MapValue }}// TODO: map via StringToStringVar: {{.Name}}
		{{else if .Entity.Enum }}{{$method.CamelName}}Cmd.Flags().Var(&{{$method.CamelName}}Req.{{.PascalName}}, "{{.KebabName}}", `{{.Summary | without "`"}}`)
		{{else}}{{$method.CamelName}}Cmd.Flags().{{template "arg-type" .Entity}}(&{{$method.CamelName}}Req.{{.PascalName}}, "{{.KebabName}}", {{$method.CamelName}}Req.{{.PascalName}}, `{{.Summary | without "`"}}`)
        {{end}}    
    {{- end}}
    {{end}}
}

var {{.CamelName}}Cmd = &cobra.Command{
	Use: "{{.KebabName}}",
	{{if .Description -}}
    Short: `{{.Summary | without "`"}}`,
	Long: `{{.Comment  "  " 80 | without "`"}}`,
    {{end}}
	PreRunE: sdk.{{if .Service.IsAccounts}}PreAccountClient{{else}}PreWorkspaceClient{{end}},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		{{if .Service.IsAccounts}}a := sdk.AccountClient(ctx){{else}}w := sdk.WorkspaceClient(ctx){{end}}
		{{if .Response}}response, {{end}}err := {{if .Service.IsAccounts}}a{{else}}w{{end}}.{{if eq .Service.Package.Name "scim" -}}
			{{trim_prefix .Service.PascalName "Account"}} 
		{{- else}}{{.Service.PascalName}}{{end}}.{{.PascalName}}{{if .Pagination}}All{{end}}(ctx{{if .Request}}, {{.CamelName}}Req{{end}})
		if err != nil {
			return err
		}
        {{if .Response -}}
		return ui.Render(cmd, response)
		{{else -}}
		return nil
		{{- end -}}
	},
}
{{end}}
{{end}}

// end service {{.Name}}{{end}}

{{- define "arg-type" -}}
	{{- if .IsString}}StringVar
	{{- else if .IsBool}}BoolVar
	{{- else if .IsInt64}}Int64Var
	{{- else if .IsFloat64}}Float64Var
	{{- else if .IsInt}}IntVar
	{{- else if .Enum }}StringVar
	{{- else}}/* NOT PRIMITIVE */
	{{- end -}}
{{- end -}}
