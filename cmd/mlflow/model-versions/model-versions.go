package model_versions

import (
	"github.com/databricks/bricks/lib/sdk"
	"github.com/databricks/bricks/lib/ui"
	"github.com/databricks/databricks-sdk-go/service/mlflow"
	"github.com/spf13/cobra"
)

var Cmd = &cobra.Command{
	Use: "model-versions",
}

var createReq mlflow.CreateModelVersionRequest

func init() {
	Cmd.AddCommand(createCmd)
	// TODO: short flags

	createCmd.Flags().StringVar(&createReq.Description, "description", "", `Optional description for model version.`)
	createCmd.Flags().StringVar(&createReq.Name, "name", "", `Register model under this name.`)
	createCmd.Flags().StringVar(&createReq.RunId, "run-id", "", `MLflow run ID for correlation, if source was generated by an experiment run in MLflow tracking server.`)
	createCmd.Flags().StringVar(&createReq.RunLink, "run-link", "", `MLflow run link - this is the exact link of the run that generated this model version, potentially hosted at another instance of MLflow.`)
	createCmd.Flags().StringVar(&createReq.Source, "source", "", `URI indicating the location of the model artifacts.`)
	// TODO: array: tags

}

var createCmd = &cobra.Command{
	Use:   "create",
	Short: `Create a model version.`,
	Long: `Create a model version.
  
  Creates a model version.`,

	PreRunE: sdk.PreWorkspaceClient,
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		w := sdk.WorkspaceClient(ctx)
		response, err := w.ModelVersions.Create(ctx, createReq)
		if err != nil {
			return err
		}

		pretty, err := ui.MarshalJSON(response)
		if err != nil {
			return err
		}
		cmd.OutOrStdout().Write(pretty)

		return nil
	},
}

var deleteReq mlflow.DeleteModelVersionRequest

func init() {
	Cmd.AddCommand(deleteCmd)
	// TODO: short flags

	deleteCmd.Flags().StringVar(&deleteReq.Name, "name", "", `Name of the registered model.`)
	deleteCmd.Flags().StringVar(&deleteReq.Version, "version", "", `Model version number.`)

}

var deleteCmd = &cobra.Command{
	Use:   "delete",
	Short: `Delete a model version.`,
	Long: `Delete a model version.
  
  Deletes a model version.`,

	PreRunE: sdk.PreWorkspaceClient,
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		w := sdk.WorkspaceClient(ctx)
		err := w.ModelVersions.Delete(ctx, deleteReq)
		if err != nil {
			return err
		}

		return nil
	},
}

var deleteTagReq mlflow.DeleteModelVersionTagRequest

func init() {
	Cmd.AddCommand(deleteTagCmd)
	// TODO: short flags

	deleteTagCmd.Flags().StringVar(&deleteTagReq.Key, "key", "", `Name of the tag.`)
	deleteTagCmd.Flags().StringVar(&deleteTagReq.Name, "name", "", `Name of the registered model that the tag was logged under.`)
	deleteTagCmd.Flags().StringVar(&deleteTagReq.Version, "version", "", `Model version number that the tag was logged under.`)

}

var deleteTagCmd = &cobra.Command{
	Use:   "delete-tag",
	Short: `Delete a model version tag.`,
	Long: `Delete a model version tag.
  
  Deletes a model version tag.`,

	PreRunE: sdk.PreWorkspaceClient,
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		w := sdk.WorkspaceClient(ctx)
		err := w.ModelVersions.DeleteTag(ctx, deleteTagReq)
		if err != nil {
			return err
		}

		return nil
	},
}

var getReq mlflow.GetModelVersionRequest

func init() {
	Cmd.AddCommand(getCmd)
	// TODO: short flags

	getCmd.Flags().StringVar(&getReq.Name, "name", "", `Name of the registered model.`)
	getCmd.Flags().StringVar(&getReq.Version, "version", "", `Model version number.`)

}

var getCmd = &cobra.Command{
	Use:   "get",
	Short: `Get a model version.`,
	Long: `Get a model version.
  
  Get a model version.`,

	PreRunE: sdk.PreWorkspaceClient,
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		w := sdk.WorkspaceClient(ctx)
		response, err := w.ModelVersions.Get(ctx, getReq)
		if err != nil {
			return err
		}

		pretty, err := ui.MarshalJSON(response)
		if err != nil {
			return err
		}
		cmd.OutOrStdout().Write(pretty)

		return nil
	},
}

var getDownloadUriReq mlflow.GetModelVersionDownloadUriRequest

func init() {
	Cmd.AddCommand(getDownloadUriCmd)
	// TODO: short flags

	getDownloadUriCmd.Flags().StringVar(&getDownloadUriReq.Name, "name", "", `Name of the registered model.`)
	getDownloadUriCmd.Flags().StringVar(&getDownloadUriReq.Version, "version", "", `Model version number.`)

}

var getDownloadUriCmd = &cobra.Command{
	Use:   "get-download-uri",
	Short: `Get a model version URI.`,
	Long: `Get a model version URI.
  
  Gets a URI to download the model version.`,

	PreRunE: sdk.PreWorkspaceClient,
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		w := sdk.WorkspaceClient(ctx)
		response, err := w.ModelVersions.GetDownloadUri(ctx, getDownloadUriReq)
		if err != nil {
			return err
		}

		pretty, err := ui.MarshalJSON(response)
		if err != nil {
			return err
		}
		cmd.OutOrStdout().Write(pretty)

		return nil
	},
}

var searchReq mlflow.SearchModelVersionsRequest

func init() {
	Cmd.AddCommand(searchCmd)
	// TODO: short flags

	searchCmd.Flags().StringVar(&searchReq.Filter, "filter", "", `String filter condition, like "name='my-model-name'".`)
	searchCmd.Flags().IntVar(&searchReq.MaxResults, "max-results", 0, `Maximum number of models desired.`)
	// TODO: array: order_by
	searchCmd.Flags().StringVar(&searchReq.PageToken, "page-token", "", `Pagination token to go to next page based on previous search query.`)

}

var searchCmd = &cobra.Command{
	Use:   "search",
	Short: `Searches model versions.`,
	Long: `Searches model versions.
  
  Searches for specific model versions based on the supplied __filter__.`,

	PreRunE: sdk.PreWorkspaceClient,
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		w := sdk.WorkspaceClient(ctx)
		response, err := w.ModelVersions.SearchAll(ctx, searchReq)
		if err != nil {
			return err
		}

		pretty, err := ui.MarshalJSON(response)
		if err != nil {
			return err
		}
		cmd.OutOrStdout().Write(pretty)

		return nil
	},
}

var setTagReq mlflow.SetModelVersionTagRequest

func init() {
	Cmd.AddCommand(setTagCmd)
	// TODO: short flags

	setTagCmd.Flags().StringVar(&setTagReq.Key, "key", "", `Name of the tag.`)
	setTagCmd.Flags().StringVar(&setTagReq.Name, "name", "", `Unique name of the model.`)
	setTagCmd.Flags().StringVar(&setTagReq.Value, "value", "", `String value of the tag being logged.`)
	setTagCmd.Flags().StringVar(&setTagReq.Version, "version", "", `Model version number.`)

}

var setTagCmd = &cobra.Command{
	Use:   "set-tag",
	Short: `Set a version tag.`,
	Long: `Set a version tag.
  
  Sets a model version tag.`,

	PreRunE: sdk.PreWorkspaceClient,
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		w := sdk.WorkspaceClient(ctx)
		err := w.ModelVersions.SetTag(ctx, setTagReq)
		if err != nil {
			return err
		}

		return nil
	},
}

var transitionStageReq mlflow.TransitionModelVersionStage

func init() {
	Cmd.AddCommand(transitionStageCmd)
	// TODO: short flags

	transitionStageCmd.Flags().BoolVar(&transitionStageReq.ArchiveExistingVersions, "archive-existing-versions", false, `When transitioning a model version to a particular stage, this flag dictates whether all existing model versions in that stage should be atomically moved to the "archived" stage.`)
	transitionStageCmd.Flags().StringVar(&transitionStageReq.Name, "name", "", `Name of the registered model.`)
	transitionStageCmd.Flags().StringVar(&transitionStageReq.Stage, "stage", "", `Transition model_version to new stage.`)
	transitionStageCmd.Flags().StringVar(&transitionStageReq.Version, "version", "", `Model version number.`)

}

var transitionStageCmd = &cobra.Command{
	Use:   "transition-stage",
	Short: `Transition a stage.`,
	Long: `Transition a stage.
  
  Transition to the next model stage.`,

	PreRunE: sdk.PreWorkspaceClient,
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		w := sdk.WorkspaceClient(ctx)
		response, err := w.ModelVersions.TransitionStage(ctx, transitionStageReq)
		if err != nil {
			return err
		}

		pretty, err := ui.MarshalJSON(response)
		if err != nil {
			return err
		}
		cmd.OutOrStdout().Write(pretty)

		return nil
	},
}

var updateReq mlflow.UpdateModelVersionRequest

func init() {
	Cmd.AddCommand(updateCmd)
	// TODO: short flags

	updateCmd.Flags().StringVar(&updateReq.Description, "description", "", `If provided, updates the description for this registered_model.`)
	updateCmd.Flags().StringVar(&updateReq.Name, "name", "", `Name of the registered model.`)
	updateCmd.Flags().StringVar(&updateReq.Version, "version", "", `Model version number.`)

}

var updateCmd = &cobra.Command{
	Use:   "update",
	Short: `Update model version.`,
	Long: `Update model version.
  
  Updates the model version.`,

	PreRunE: sdk.PreWorkspaceClient,
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx := cmd.Context()
		w := sdk.WorkspaceClient(ctx)
		err := w.ModelVersions.Update(ctx, updateReq)
		if err != nil {
			return err
		}

		return nil
	},
}
