// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks_client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// DatabricksClientInterface is an autogenerated mock type for the DatabricksClientInterface type
type DatabricksClientInterface struct {
	mock.Mock
}

// Do provides a mock function with given fields: ctx, method, path, headers, request, response, visitors
func (_m *DatabricksClientInterface) Do(ctx context.Context, method string, path string, headers map[string]string, request interface{}, response interface{}, visitors ...func(*http.Request) error) error {
	_va := make([]interface{}, len(visitors))
	for _i := range visitors {
		_va[_i] = visitors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, method, path, headers, request, response)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, interface{}, interface{}, ...func(*http.Request) error) error); ok {
		r0 = rf(ctx, method, path, headers, request, response, visitors...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabricksClientInterface creates a new instance of DatabricksClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabricksClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabricksClientInterface {
	mock := &DatabricksClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
