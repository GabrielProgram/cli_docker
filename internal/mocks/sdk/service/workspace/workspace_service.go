// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/databricks/databricks-sdk-go/client"

	mock "github.com/stretchr/testify/mock"

	workspace "github.com/databricks/databricks-sdk-go/service/workspace"
)

// WorkspaceService is an autogenerated mock type for the WorkspaceService type
type WorkspaceService struct {
	mock.Mock
}

// Client provides a mock function with given fields:
func (_m *WorkspaceService) Client() client.DatabricksClientInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 client.DatabricksClientInterface
	if rf, ok := ret.Get(0).(func() client.DatabricksClientInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.DatabricksClientInterface)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) Delete(ctx context.Context, request workspace.Delete) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Delete) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Export provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) Export(ctx context.Context, request workspace.ExportRequest) (*workspace.ExportResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 *workspace.ExportResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ExportRequest) (*workspace.ExportResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ExportRequest) *workspace.ExportResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.ExportResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.ExportRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionLevels provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) GetPermissionLevels(ctx context.Context, request workspace.GetWorkspaceObjectPermissionLevelsRequest) (*workspace.GetWorkspaceObjectPermissionLevelsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionLevels")
	}

	var r0 *workspace.GetWorkspaceObjectPermissionLevelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetWorkspaceObjectPermissionLevelsRequest) (*workspace.GetWorkspaceObjectPermissionLevelsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetWorkspaceObjectPermissionLevelsRequest) *workspace.GetWorkspaceObjectPermissionLevelsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.GetWorkspaceObjectPermissionLevelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.GetWorkspaceObjectPermissionLevelsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) GetPermissions(ctx context.Context, request workspace.GetWorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 *workspace.WorkspaceObjectPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetWorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetWorkspaceObjectPermissionsRequest) *workspace.WorkspaceObjectPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.WorkspaceObjectPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.GetWorkspaceObjectPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) GetStatus(ctx context.Context, request workspace.GetStatusRequest) (*workspace.ObjectInfo, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *workspace.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetStatusRequest) (*workspace.ObjectInfo, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.GetStatusRequest) *workspace.ObjectInfo); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.ObjectInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.GetStatusRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Import provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) Import(ctx context.Context, request workspace.Import) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Import")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Import) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) List(ctx context.Context, request workspace.ListWorkspaceRequest) (*workspace.ListResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *workspace.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ListWorkspaceRequest) (*workspace.ListResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.ListWorkspaceRequest) *workspace.ListResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.ListWorkspaceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mkdirs provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) Mkdirs(ctx context.Context, request workspace.Mkdirs) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Mkdirs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.Mkdirs) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPermissions provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) SetPermissions(ctx context.Context, request workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SetPermissions")
	}

	var r0 *workspace.WorkspaceObjectPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) *workspace.WorkspaceObjectPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.WorkspaceObjectPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermissions provides a mock function with given fields: ctx, request
func (_m *WorkspaceService) UpdatePermissions(ctx context.Context, request workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *workspace.WorkspaceObjectPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) (*workspace.WorkspaceObjectPermissions, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) *workspace.WorkspaceObjectPermissions); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspace.WorkspaceObjectPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, workspace.WorkspaceObjectPermissionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWorkspaceService creates a new instance of WorkspaceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkspaceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkspaceService {
	mock := &WorkspaceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
